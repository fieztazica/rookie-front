//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/__generated__"
  combineScalarFilters = true
  noAtomicOperations   = true
}

enum Gender {
  MALE
  FEMALE
  UNDEFINED
}

enum OrderStatus {
  CANCELLED
  PENDING
  SHIPPING
  COMPLETED
}

/// @@deny('read', deleted)
model Customer {
  id          String     @id() @default(cuid()) @map("customer_id")
  /// @email
  email       String     @unique() @db.VarChar(255)
  /// @trim
  phoneNumber String?    @unique() @db.VarChar(24)
  /// @trim
  firstName   String     @db.VarChar(255)
  /// @trim
  lastName    String     @db.VarChar(255)
  /// @trim
  displayName String?    @db.VarChar(255)
  gender      Gender?    @default(UNDEFINED)
  accountId   String?    @unique() @map("account_id")
  orders      Order[]
  feedback    Feedback[]
  /// @omit
  deleted     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()

  @@map("customers")
}

/// @@deny('read', deleted)
model Author {
  id          String            @id() @default(cuid()) @map("author_id")
  /// @trim
  firstName   String            @db.VarChar(255)
  /// @trim
  lastName    String            @db.VarChar(255)
  /// @trim
  displayName String?           @db.VarChar(255)
  /// @email
  email       String            @unique() @db.VarChar(255)
  phoneNumber String            @unique() @db.VarChar(24)
  description String?           @db.Text()
  /// @omit
  deleted     Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt()
  products    ProductToAuthor[]

  @@map("authors")
}

model ProductToAuthor {
  productId String   @map("product_id")
  authorId  String   @map("author_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@id([productId, authorId])
  @@map("product_to_authors")
}

/// @@deny('read', deleted)
model Product {
  id            String              @id() @default(cuid()) @map("product_id")
  /// @lower
  /// @trim
  name          String              @unique() @db.VarChar(255)
  /// @trim
  displayName   String?             @db.VarChar(255)
  /// @trim
  description   String?             @db.Text()
  /// @trim
  /// @url
  imageUrl      String?
  /// @gte(0)
  price         Float
  salePrice     Float               @default(-1)
  /// @gte(0)
  /// @lte(5)
  ratings       Float               @default(0)
  /// @trim
  accountId     String?             @map("account_id")
  /// @gte(0)
  storeQuantity Int                 @default(0)
  /// @gte(0)
  views         Int                 @default(0)
  categories    ProductToCategory[]
  orderItems    OrderItem[]
  feedbacks     Feedback[]
  authors       ProductToAuthor[]
  /// @omit
  deleted       Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt()

  @@map("products")
}

/// @@deny('read', deleted)
model Category {
  id          String              @id() @default(cuid()) @map("category_id")
  /// @lower
  /// @trim
  name        String              @unique() @db.VarChar(255)
  /// @trim
  description String?             @db.VarChar(255)
  /// @trim
  displayName String?             @db.VarChar(255)
  products    ProductToCategory[]
  /// @omit
  deleted     Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt()

  @@map("categories")
}

model ProductToCategory {
  productId  String   @map("product_id")
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@id([productId, categoryId])
  @@map("product_to_categories")
}

/// @@deny('read', deleted)
model Feedback {
  id         String   @id() @default(cuid()) @map("feedback_id")
  customerId String   @map("customer_id")
  productId  String   @map("product_id")
  title      String   @db.Text()
  message    String   @db.Text()
  /// @gte(1)
  /// @lte(5)
  rating     Int      @db.SmallInt()
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  /// @omit
  deleted    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@map("feedbacks")
}

/// @@deny('read', deleted)
model Order {
  id         String      @id() @default(cuid()) @map("order_id")
  customerId String      @map("customer_id")
  /// @gte(0)
  total      Float
  status     OrderStatus @default(PENDING)
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  /// @omit
  deleted    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()

  @@map("orders")
}

model OrderItem {
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  /// @gte(0)
  price     Float
  /// @gte(0)
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@id([orderId, productId])
  @@map("order_items")
}

/// @@deny('read', deleted)
model Config {
  /// @trim
  key       String   @id()
  value     String   @db.Text()
  /// @omit
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("configs")
}
