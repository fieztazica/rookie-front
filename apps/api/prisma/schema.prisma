//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/__generated__"
  combineScalarFilters = true
  noAtomicOperations   = true
}

enum Gender {
  MALE
  FEMALE
  UNDEFINED
}

/// @@deny('read', deleted)
model Customer {
  id          String     @id() @default(cuid()) @map("customer_id")
  username    String     @unique() @db.VarChar(64)
  email       String     @unique() @db.VarChar(255)
  phoneNumber String     @unique() @db.VarChar(24)
  firstName   String     @db.VarChar(255)
  lastName    String     @db.VarChar(255)
  displayName String?    @db.VarChar(255)
  gender      Gender?    @default(UNDEFINED)
  accountId   String?    @map("account_id")
  orders      Order[]
  feedback    Feedback[]
  /// @omit
  deleted     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()

  @@map("customers")
}

/// @@deny('read', deleted)
model Author {
  id          String            @id() @default(cuid()) @map("author_id")
  firstName   String            @db.VarChar(255)
  lastName    String            @db.VarChar(255)
  displayName String?           @db.VarChar(255)
  email       String            @unique() @db.VarChar(255)
  phoneNumber String            @unique() @db.VarChar(24)
  description String?           @db.Text()
  /// @omit
  deleted     Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt()
  products    ProductToAuthor[]

  @@map("authors")
}

/// @@deny('read', deleted)
model Publisher {
  id          String               @id() @default(cuid()) @map("publisher_id")
  name        String               @unique() @db.VarChar(64)
  displayName String?              @db.VarChar(255)
  email       String               @unique() @db.VarChar(255)
  phoneNumber String               @db.VarChar(24)
  website     String               @db.Text()
  /// @omit
  deleted     Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt()
  products    ProductToPublisher[]

  @@map("publishers")
}

model ProductToAuthor {
  productId String   @map("product_id")
  authorId  String   @map("author_id")
  product   Product  @relation(fields: [productId], references: [id])
  author    Author   @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@id([productId, authorId])
  @@map("product_to_authors")
}

model ProductToPublisher {
  productId   String    @map("product_id")
  publisherId String    @map("publisher_id")
  product     Product   @relation(fields: [productId], references: [id])
  publisher   Publisher @relation(fields: [publisherId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()

  @@id([productId, publisherId])
  @@map("product_to_publishers")
}

/// @@deny('read', deleted)
model Product {
  id            String               @id() @default(cuid()) @map("product_id")
  name          String               @unique() @db.VarChar(255)
  displayName   String?              @db.VarChar(255)
  description   String?              @db.Text()
  price         Decimal              @db.Decimal()
  salePrice     Decimal?             @db.Decimal()
  ratings       Float                @default(0)
  accountId     String?              @map("account_id")
  storeQuantity Int                  @default(0)
  categories    ProductToCategory[]
  orderItems    OrderItem[]
  feedbacks     Feedback[]
  images        Image[]
  publishers    ProductToPublisher[]
  authors       ProductToAuthor[]
  /// @omit
  deleted       Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt()

  @@map("products")
}

/// @@deny('read', deleted)
model Image {
  id          Int      @default(autoincrement()) @map("image_id")
  productId   String   @map("product_id")
  url         String   @db.Text()
  alt         String?  @db.VarChar(255)
  isThumbnail Boolean  @default(false)
  product     Product  @relation(fields: [productId], references: [id])
  /// @omit
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@id([id, productId])
  @@map("images")
}

/// @@deny('read', deleted)
model Category {
  id          String              @id() @default(cuid()) @map("category_id")
  name        String              @unique() @db.VarChar(255)
  description String?             @db.VarChar(255)
  displayName String?             @db.VarChar(255)
  products    ProductToCategory[]
  /// @omit
  deleted     Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt()

  @@map("categories")
}

model ProductToCategory {
  productId  String   @map("product_id")
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@id([productId, categoryId])
  @@map("product_to_categories")
}

/// @@deny('read', deleted)
model Feedback {
  id         String   @id() @default(cuid()) @map("feedback_id")
  customerId String   @map("customer_id")
  productId  String   @map("product_id")
  message    String   @db.Text()
  rating     Int      @db.SmallInt()
  status     String?  @db.VarChar(255)
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  /// @omit
  deleted    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@map("feedbacks")
}

/// @@deny('read', deleted)
model Order {
  id         String      @id() @default(cuid()) @map("order_id")
  customerId String      @map("customer_id")
  total      Decimal     @db.Decimal()
  customer   Customer    @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  /// @omit
  deleted    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()

  @@map("orders")
}

model OrderItem {
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  price     Decimal  @db.Decimal()
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@id([orderId, productId])
  @@map("order_items")
}
